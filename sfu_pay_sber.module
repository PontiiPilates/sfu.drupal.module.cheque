<?php

/**
 * Implement hook_init().
 */
function sfu_pay_sber_init()
{
	drupal_add_js(drupal_get_path('module', 'sfu_pay_sber') . '/sfu_pay_sber.js');
}

/**
 * Implement hook_menu().
 */
function sfu_pay_sber_menu()
{
	$items = array();
	// Страница успешной транзакции.
	$items['transaction-success'] = array(
		'title' => 'Оплата успешно завершена',
		'page callback' => 'transaction_success',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK
	);
	// Страница неудавшейся транзакции.
	$items['transaction-failure'] = array(
		'title' => 'Не удалось произвести оплату',
		'page callback' => 'transaction_failure',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK
	);
	// Страница вывода чека.
	$items['sberbank-cheque'] = array(
		'title' => 'Информация о платеже за услугу СФУ',
		'page callback' => 'cheque_output',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK
	);
	// Страница выдачи чека по id транзакции.
	$items['get-cheque'] = array(
		'title' => 'Получить чек по orderId транзакции',
		'page callback' => 'render_get_check',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK
	);
	// Страница регистра транзакций.
	$items['sberbank-register'] = array(
		'title' => 'Реестр транзакций через интернет-эквайринг от Сбербанка',
		'page callback' => 'registry_output',
		'access arguments' => array('view pays'),
		'type' => MENU_CALLBACK
	);
	return $items;
}

/**
 * Внесение успешной транзакции в базу данных.
 * Отправка на почту плательщика ссылки на чек.
 * Тестовые параметры: http://hg.pay/transaction-success?orderId=525606fb-cae8-70b7-a1be-05710211d19b&lang=ru
 */
function transaction_success()
{
	// Подключение файла с доступами.
	require('access.php');

	// Получение orderId из параметров запроса.
	$order_id = '';
	if ($_GET['orderId']) {
		$order_id = $_GET['orderId'];
	} elseif ($_GET['transaction_orderId']) {
		$order_id = $_GET['transaction_orderId'];
	}

	// Запрос на получение статуса транзакции.
	$get_transaction_info = "$order_status_do?userName=$api_name&password=$api_pass&orderId=$order_id";
	// Отправка запроса.
	$get_transaction_info = file_get_contents($get_transaction_info);
	// Преобразование json в ассоциативный массив.
	$get_transaction_info = json_decode($get_transaction_info, TRUE);
	// Получение полей формы, заполненной пользователем перед совершением транзакции.
	$get_fields = $get_transaction_info['merchantOrderParams'];
	// Преобразование имен и значений переданных полей формы в ассоциативный массив.
	$fields = array();
	foreach ($get_fields as $key => $value) {
		$fields[$value['name']] = $value['value'];
	};

	// Подготовка значений для занесения в базу данных.
	$description    = $fields['Описание'];
	$libnumber      = $fields['Читательский билет'];
	$personal       = $fields['personal'];
	$package        = $fields['Количество проверок'];
	$surname        = $fields['Фамилия читателя'];
	$address        = $fields['Адрес'];
	$dogovor        = $fields['Договор'];
	$hostel         = $fields['Общежитие'];
	$status         = $fields['Статус'];
	$payer          = $fields['Плательщик'];
	$phone          = $fields['Телефон'];
	$event          = $fields['Событие'];
	$email          = $fields['Почта'];
	$room           = $fields['Комната'];
	$url            = $fields['URL'];
	$fio            = $fields['ФИО'];
	$org            = $fields['Организация'];
	$order_number   = $get_transaction_info['orderNumber'];
	$order_status   = $get_transaction_info['orderStatus'];
	$error_code 	= $get_transaction_info['errorCode'];
	$service        = $get_transaction_info['orderDescription'];
	$cost           = $get_transaction_info['paymentAmountInfo']['approvedAmount'] / 100;
	$transfer_data	= array();
	$password 		= _password_generate();
	$link_cheque	= "$url_prefix/sberbank-cheque?orderNumber=$order_number&password=$password";

	// Проверка корректности orderId
	if ($error_code > 0) {
		exit('Введите корректный orderId');
	}
	// Преобразование статуса транзакции для занесения в базу данных.
	if ($order_status == 2) {
		$order_status = 'оплачено';
	};

	// Поиск транзакции в базе по orderId.
	$check__transaction_in_db = _db_query_check($connect, "SELECT * FROM $table_name WHERE `order_id` = '$order_id'");
	if ($check__transaction_in_db) {
		$transfer_data['transaction_in_db'] = TRUE;
		$transfer_data['transaction_in_db__message'] = 'Транзакция находится в базе данных';
	} else {
		$transfer_data['transaction_in_db'] = FALSE;
		$transfer_data['transaction_in_db__message'] = 'Транзакци нет в базе данных';

		// Добавление записи в базу данных.
		$check__adding_transaction = _db_query_add($connect, "INSERT INTO $table_name VALUES (NULL, '$description', '$libnumber', '$personal', '$package', '$service', '$surname', '$address', '$dogovor', '$hostel', '$status', '$payer', '$phone', '$event', '$email', '$cost', '$room', '$url', '$fio', '$org', '$order_id', '$password', '$order_number', '$order_status', CURRENT_TIMESTAMP, 'unsend', '$link_cheque')");
		if ($check__adding_transaction) {
			$transfer_data['adding_transaction'] = TRUE;
			$transfer_data['adding_transaction__message'] = 'Транзакция добавлена в базу данных';
		} else {
			$transfer_data['adding_transaction'] = FALSE;
			$transfer_data['adding_transaction'] = 'Не удалось добавить транзакцию в базу данных. Сохраните содержимое адресной строки на текущей странице и сообщите о проблеме разработчикам: info@sfu-kras.ru, тел. 206-98-60';
			die('Не удалось добавить транзакцию в базу данных. Сохраните содержимое адресной строки на текущей странице и сообщите о проблеме разработчикам: info@sfu-kras.ru, тел. 206-98-60');
		}
	}

	// Получение ссылки на чек уже из базы.
	$link_cheque = _db_query_output($connect, "SELECT `cheque_link` FROM $table_name WHERE `order_id` = '$order_id'");
	$link_cheque = $link_cheque['cheque_link'];

	// Получение статуса отправки email.
	$check__mail_state = _db_query_check($connect, "SELECT * FROM $table_name WHERE `mail_send` = 'unsend' AND `order_id` = '$order_id'");
	if ($check__mail_state) {
		$transfer_data['mail_state'] = TRUE;
		$transfer_data['mail_state__message'] = 'Email со ссылкой на чек об оплате еще не был отправлен';

		// Отправка сообщения со ссылкой на почту.
		$check__mail_send = drupal_mail('sfu_pay_sber', 'key_mail_sber', $email, language_default(), array('body' => t("Получено подтверждение от банка об успешной оплате услуги СФУ. Информация о платеже доступна по ссылке: $link_cheque")));
		if ($check__mail_send['result']) {
			$transfer_data['mail_send'] = TRUE;
			$transfer_data['mail_send__message'] = 'Сообщение со ссылкой отправлено на указанную почту';

			// Занесение отметки об отправке сообщения на почту.
			$datetime = time();
			$check__mail_state_update = _db_query_update($connect, "UPDATE $table_name SET `mail_send` = '$datetime' WHERE `order_id` = '$order_id'");
			if ($check__mail_state_update) {
				$transfer_data['mail_state_update'] = TRUE;
				$transfer_data['mail_state_update__message'] = 'Обновление статуса отправки email завершено';
			} else {
				$transfer_data['mail_state_update'] = FALSE;
				$transfer_data['mail_state_update__message'] = 'Не удалось обновить статус отправки email';
			}
		} else {
			$transfer_data['mail_send'] = FALSE;
			$transfer_data['mail_send__message'] = 'Не удалось отправить сообщение на почту';
		}
	} else {
		$transfer_data['mail_state'] = FALSE;
		$transfer_data['mail_state__message'] = 'Ссылка на чек об оплате была отправлена на указанный email';
	}

	return header("Location: $link_cheque");
}

/**
 * Страница неудавшейся оплаты.
 */
function transaction_failure()
{
	$output = '
	<p>Оплата может не пройти потому что:</p>
	<ul>
	<li>Введены неверные данные карты; </li>
	<li>У карты закончился срок действия;</li>
	<li>На карте недостаточно средств для списания;</li>
	<li>Нельзя подтвердить операцию по карте одноразовым паролем из СМС;</li>
	<li>Банк установил запрет на оплату в интернете;</li>
	</ul>

	<p><b>Если оплата не прошла:</b></p>
	<ul>
	<li>Повторите попытку через 20 минут; </li>
	<li>Обратитесь в банк, выпустивший карту;</li>
	<li>Попробуйте оплатить другой картой;</li>
	</ul>
	';
	return $output;
}

/**
 * Отправка данных из формы на страницу успешной оплаты.
 * Тестовые параметры: http://hg.pay/get-cheque
 */
function get_check()
{
	require_once('access.php');
	$form = array();
	$form['#method'] = 'GET';
	$form['#action'] = url("transaction-success");
	$form['transaction_orderId'] = array(
		'#title' => 'Введите orderId вашей транзакции',
		'#type' => 'textfield',
		'#required' => TRUE,
		'#description' => 'Например: 525606fb-cae8-70b7-a1be-05710211d19b',
	);
	$form['send_transaction_id'] = array(
		'#type' => 'submit',
		'#value' => t('Получить чек'),
	);
	return $form;
}

/**
 * Страница вывода чека об оплате.
 * Тестовые параметры: ?orderNumber=1594018660&password=ebqhx3z6ck
 */
function cheque_output()
{
	// Вывод шаблоны страницы.
	ob_start();
	require('sberbank-cheque.tpl.php');
	$output = ob_get_contents();
	ob_end_clean();
	return $output;
}

/**
 * Рендер формы и вывод содержимого на страницу.
 */
function render_get_check()
{
	$output = '
	<p>Если при оплате услуг вы использовали кнопку <strong>"Оплатить сервисом Сбербанка"</strong> и у вас нет чека, то здесь его можно получить.</br>
	Для этого вам нужно запросить orderId в у сотрудников <a href="http://structure.sfu-kras.ru/node/538#staff">отдела</a> и ввести его в поле ниже.</p>
	';
	$output .= drupal_get_form('get_check');
	return $output;
}

/**
 * Страница реестра.
 */
function registry_output()
{
	ob_start();
	require('sberbank-register.tpl.php');
	$output = ob_get_contents();
	ob_end_clean();
	return $output;
}

/**
 * Implements hook_mail().
 */
function sfu_pay_sber_mail($key, &$message, $params)
{
	switch ($key) {
			// Ключ, добавленный при использовании функции drupal_mail()
		case 'key_mail_sber':
			$message['subject'] = t('Чек об оплате услуги СФУ');
			$message['body'][] = $params['body'];
			break;
	}
}

// ! Коды orderStatus:
// 0 - заказ зарегистрирован, но не оплачен;
// 1 - предавторизованная сумма удержана (для двухстадийных платежей);
// 2 - проведена полная авторизация суммы заказа;
// 3 - авторизация отменена;
// 4 - по транзакции была проведена операция возврата;
// 5 - инициирована авторизация через сервер контроля доступа банка-эмитента;
// 6 - авторизация отклонена.

// ! Коды ошибок:
// 0 - Обработка запроса прошла без системных ошибок.
// 5 - Доступ запрещён.
// 5 - Пользователь должен сменить свой пароль.
// 5 - [orderId] не задан.
// 6 - Незарегистрированный orderId.
// 7 - Системная ошибка.